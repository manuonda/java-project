### Pattern Sidecar 

In a microservices architecture, the sidecar pattern is an approach where an additional component is deployed alongside a primary microservice to handle **auxiliary tasks such as communication, security, monitoring, and configuration management**.	
This additional component, known as a **"sidecar,"** runs in the same environment as the microservice (e.g., in the same pod in Kubernetes) and acts as a proxy or agent that extends the capabilities of the microservice without altering its code.

#### Images sidecar



### Common Use Cases

 **Logging and Monitoring**: Sidecar containers can handle log aggregation, log rotation, and forwarding logs to centralized systems like Elasticsearch or Splunk. They can also collect metrics, trace requests, and export them to observability platforms such as Prometheus or Jaeger.
    
 **Service Mesh Integration**: Sidecar containers are a crucial component of service mesh implementations like Istio or Linkerd. They handle traffic management, load balancing, circuit breaking, and secure communication between services, offloading these responsibilities from the main application.
    
 **Security and Authentication**: Sidecar containers can handle security-related tasks such as SSL termination, authentication, and authorization. They can implement protocols like OAuth, JWT, or OpenID Connect to secure communication between services.
    
 **Caching and Content Delivery**: Sidecar containers can provide caching functionality by utilizing solutions like Redis or Memcached. They can cache frequently accessed data, reducing the load on the main application and improving response times.


### Run Application 

### Create

In wich folder  **/book-service**  and  **/logging-service** run the next command to create

```
./mvnw clean install -D skipTests
```



### Links
[Demystifying Kubernetes Sidecar: Enhancing Microservices Architecture](https://medium.com/@extio/demystifying-kubernetes-sidecar-enhancing-microservices-architecture-c4fe40585c05)

[Handling Cross-Cutting Concerns in Microservices: The Sidecar Pattern](https://blog.bitsrc.io/handling-cross-cutting-concerns-in-microservices-the-sidecar-pattern-59890fe3dc0f)
