services:
  
  multithread:
    image: multithread:latest
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - 'DB_HOST=mysql' 
      - 'DB_USERNAME=root'
      - 'DB_PASSWORD=root'
      - 'DB_PORT=3306'     # Fixed colon to equals sign
      - 'DB_NAME=db'       # Added missing variable
      - 'KAFKA_HOST=kafka'
      - 'KAFKA_PORT=9092'
    ports:
      - '9393:9393'
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - app-network
        
  mysql:
    image: 'mysql:latest'
    container_name: mysql_test
    restart: always
    environment:
      - 'MYSQL_DATABASE=db'
      - 'MYSQL_ROOT_PASSWORD=root'
    ports:
      - '3306:3306'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      timeout: 5s
      retries: 10
      interval: 5s
    networks:
      - app-network

  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'
    networks:
      - app-network

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - '9092:9092'
      - '29092:29092'
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - 8090:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - app-network

# Define a custom network
networks:
  app-network:
    driver: bridge